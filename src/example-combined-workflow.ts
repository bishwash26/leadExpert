import { mastra } from './mastra';

async function combinedWorkflowExample() {
  try {
    console.log('üöÄ Starting Combined Lead Finder & Enricher Workflow...');
    
    // Example search query
    const searchQuery = 'restaurants in New York';
    const maxLeads = 3; // Limit to 3 leads for demonstration
    
    console.log(`üîç Searching for: "${searchQuery}"`);
    console.log(`üìä Maximum leads to enrich: ${maxLeads}`);
    
    // Execute the combined workflow
    const result = await mastra.executeWorkflow('combined-lead-workflow', {
      query: searchQuery,
      maxLeads: maxLeads,
    });
    
    console.log('\n' + '='.repeat(60));
    console.log('üìà COMBINED LEAD GENERATION RESULTS');
    console.log('='.repeat(60));
    
    console.log(`\nüîç Search Query: ${result.searchQuery}`);
    console.log(`üìä Total Leads Found: ${result.totalLeadsFound}`);
    console.log(`‚úÖ Leads Enriched: ${result.leadsEnriched}`);
    
    console.log('\nüìä SUMMARY STATISTICS:');
    console.log(`üìß Total Emails Found: ${result.summary.totalEmailsFound}`);
    console.log(`üìû Total Phone Numbers Found: ${result.summary.totalPhoneNumbersFound}`);
    console.log(`üîó Total Social Links Found: ${result.summary.totalSocialLinksFound}`);
    console.log(`‚≠ê Average Contact Quality: ${result.summary.averageContactQuality}`);
    
    console.log('\nüí° TOP RECOMMENDATIONS:');
    result.summary.topRecommendations.forEach((rec, index) => {
      console.log(`  ${index + 1}. ${rec}`);
    });
    
    console.log('\n' + '='.repeat(60));
    console.log('üìã DETAILED LEAD RESULTS');
    console.log('='.repeat(60));
    
    result.enrichedLeads.forEach((lead, index) => {
      console.log(`\n${index + 1}. ${lead.originalData.name}`);
      console.log(`   üìç Address: ${lead.originalData.address || 'Not available'}`);
      console.log(`   üåê Website: ${lead.originalData.website || 'Not available'}`);
      console.log(`   ‚≠ê Rating: ${lead.originalData.rating || 'Not available'}`);
      
      if (lead.enrichmentSuccess && lead.enrichedData) {
        console.log(`   ‚úÖ Enrichment: SUCCESS`);
        console.log(`   üìß Emails: ${lead.enrichedData.emails.length}`);
        console.log(`   üìû Phone Numbers: ${lead.enrichedData.phoneNumbers.length}`);
        console.log(`   üîó Social Links: ${lead.enrichedData.socialLinks.length}`);
        
        if (lead.enrichedData.emails.length > 0) {
          console.log(`   üìß Email Addresses:`);
          lead.enrichedData.emails.forEach((email, i) => {
            console.log(`      ${i + 1}. ${email}`);
          });
        }
        
        if (lead.enrichedData.phoneNumbers.length > 0) {
          console.log(`   üìû Phone Numbers:`);
          lead.enrichedData.phoneNumbers.forEach((phone, i) => {
            console.log(`      ${i + 1}. ${phone}`);
          });
        }
        
        if (lead.enrichedData.analysis.contactQuality) {
          console.log(`   üéØ Contact Quality: ${lead.enrichedData.analysis.contactQuality}`);
        }
        
        if (lead.enrichedData.analysis.recommendations.length > 0) {
          console.log(`   üí° Recommendations:`);
          lead.enrichedData.analysis.recommendations.forEach((rec, i) => {
            console.log(`      ${i + 1}. ${rec}`);
          });
        }
      } else {
        console.log(`   ‚ùå Enrichment: FAILED`);
        console.log(`   üö´ Error: ${lead.enrichmentError || 'Unknown error'}`);
      }
    });
    
    console.log('\n' + '='.repeat(60));
    console.log('üéâ COMBINED WORKFLOW COMPLETED SUCCESSFULLY!');
    console.log('='.repeat(60));
    
  } catch (error) {
    console.error('‚ùå Error during combined workflow:', error);
  }
}

// Run the example
combinedWorkflowExample(); 